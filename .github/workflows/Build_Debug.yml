
name: Build Debug OS

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repo_branch:
          description: 'iStoreOS 仓库分支'
          required: true
          default: 'istoreos-22.03'
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #  - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: scripts/istoreos/diy-part1.sh
  DIY_P2_SH: scripts/istoreos/diy-part2.sh
  WORK_DIR: /mnt/workdir
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 准备完成
      uses: actions/checkout@v4

    - name: Setup SSH tunnel
      uses: qiaodapei/github-ngrok-ssh@main
      with:
        timeout: 6h
        ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        ngrok_token: ${{ secrets.NGROK_TOKEN }}

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep 'physical id'| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v '[1-9]' | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 安装 Go 1.21.1
      uses: actions/setup-go@v5
      with:
        go-version: 1.21.1

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        DEPENDS_FILE="$GITHUB_WORKSPACE/depends/${{ matrix.os }}"
        if [ -f "$DEPENDS_FILE" ]; then
          echo "正在从 $DEPENDS_FILE 读取依赖..."
          sudo -E apt-get -qq install $(cat "$DEPENDS_FILE")
        fi
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        docker rmi $(docker images -q)
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        REPO_BRANCH=${{ github.event.inputs.repo_branch }}
        git clone $REPO_URL -b $REPO_BRANCH openwrt || {
          echo "::error::❌ 仓库克隆失败，请检查网络连接或仓库权限";
          exit 1;
        }
        if [ ! -d "openwrt/.git" ]; then
          echo "::error::❌ 错误：仓库克隆不完整，缺少.git目录"
          exit 1
        fi
        cd openwrt
        git checkout $REPO_BRANCH || {
          echo "::error::❌ 无法切换到指定分支 '$REPO_BRANCH'";
          exit 1;
        }
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Keep ngrok running
      if: ${{ matrix.use_sleep == true }}
      run: |
        sleep 43200  # Sleep for 12 hours (7200 seconds)
        pkill ngrok  # Kill the ngrok process after 12 hours
